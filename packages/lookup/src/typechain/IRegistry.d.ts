/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IRegistryInterface extends ethers.utils.Interface {
  functions: {
    "enable(bytes32)": FunctionFragment;
    "exists(bytes32)": FunctionFragment;
    "expiry(bytes32,bytes32)": FunctionFragment;
    "gracePeriod()": FunctionFragment;
    "live(bytes32,bytes32)": FunctionFragment;
    "omni(bytes32)": FunctionFragment;
    "operator(bytes32,bytes32,address)": FunctionFragment;
    "owner(bytes32)": FunctionFragment;
    "resolver(bytes32)": FunctionFragment;
    "setEnable(bytes32,bool)": FunctionFragment;
    "setExpiry(bytes32,bytes32,uint256)": FunctionFragment;
    "setOperator(bytes32,bytes32,address,bool)": FunctionFragment;
    "setOwner(bytes32,bytes32,address)": FunctionFragment;
    "setRecord(bytes,address,address,bool,bool)": FunctionFragment;
    "setResolver(bytes32,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "enable", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "exists", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "expiry",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "gracePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "live",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "omni", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "operator",
    values: [BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "resolver", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setEnable",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpiry",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [BytesLike, BytesLike, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecord",
    values: [BytesLike, string, string, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setResolver",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(functionFragment: "enable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expiry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "live", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "omni", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resolver", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setEnable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setExpiry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRecord", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setResolver",
    data: BytesLike
  ): Result;

  events: {
    "NewDomain(bytes,bytes,address)": EventFragment;
    "NewHost(bytes,bytes,bytes)": EventFragment;
    "NewOwner(bytes,address)": EventFragment;
    "NewResolver(bytes,address)": EventFragment;
    "NewTld(bytes,address)": EventFragment;
    "SetOperator(bytes,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewDomain"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewHost"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewResolver"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTld"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOperator"): EventFragment;
}

export type NewDomainEvent = TypedEvent<
  [string, string, string] & { domain: string; tld: string; owner: string }
>;

export type NewHostEvent = TypedEvent<
  [string, string, string] & { host: string; domain: string; tld: string }
>;

export type NewOwnerEvent = TypedEvent<
  [string, string] & { fqdn: string; newOwner: string }
>;

export type NewResolverEvent = TypedEvent<
  [string, string] & { fqdn: string; newResolver: string }
>;

export type NewTldEvent = TypedEvent<
  [string, string] & { tld: string; owner: string }
>;

export type SetOperatorEvent = TypedEvent<
  [string, string, boolean] & {
    fqdn: string;
    operator: string;
    approved: boolean;
  }
>;

export class IRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRegistryInterface;

  functions: {
    enable(tld: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    "exists(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "exists(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "exists(bytes32,bytes32)"(
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    expiry(
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gracePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    live(
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    omni(tld: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    "operator(bytes32,bytes32,address)"(
      domain: BytesLike,
      tld: BytesLike,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "operator(bytes32,bytes32)"(
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "operator(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "operator(bytes32,bytes32,bytes32,address)"(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "owner(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "owner(bytes32,bytes32)"(
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "resolver(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "resolver(bytes32,bytes32)"(
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setEnable(
      tld: BytesLike,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExpiry(
      domain: BytesLike,
      tld: BytesLike,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setOperator(bytes32,bytes32,address,bool)"(
      domain: BytesLike,
      tld: BytesLike,
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setOperator(bytes32,bytes32,bytes32,address,bool)"(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setOwner(bytes32,bytes32,address)"(
      domain: BytesLike,
      tld: BytesLike,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setOwner(bytes32,address)"(
      tld: BytesLike,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRecord(bytes,address,address,bool,bool)"(
      tld: BytesLike,
      owner: string,
      resolver: string,
      enable: boolean,
      omni: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRecord(bytes,bytes,address,address,uint256)"(
      domain: BytesLike,
      tld: BytesLike,
      owner: string,
      resolver: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRecord(bytes,bytes,bytes)"(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setResolver(bytes32,address)"(
      tld: BytesLike,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setResolver(bytes32,bytes32,address)"(
      domain: BytesLike,
      tld: BytesLike,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  enable(tld: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "exists(bytes32)"(
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "exists(bytes32,bytes32,bytes32)"(
    host: BytesLike,
    domain: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "exists(bytes32,bytes32)"(
    domain: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  expiry(
    domain: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  live(
    domain: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  omni(tld: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "operator(bytes32,bytes32,address)"(
    domain: BytesLike,
    tld: BytesLike,
    _operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "operator(bytes32,bytes32)"(
    domain: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "operator(bytes32,bytes32,bytes32)"(
    host: BytesLike,
    domain: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "operator(bytes32,bytes32,bytes32,address)"(
    host: BytesLike,
    domain: BytesLike,
    tld: BytesLike,
    _operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "owner(bytes32)"(tld: BytesLike, overrides?: CallOverrides): Promise<string>;

  "owner(bytes32,bytes32)"(
    domain: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "resolver(bytes32)"(
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "resolver(bytes32,bytes32)"(
    domain: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  setEnable(
    tld: BytesLike,
    enable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExpiry(
    domain: BytesLike,
    tld: BytesLike,
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setOperator(bytes32,bytes32,address,bool)"(
    domain: BytesLike,
    tld: BytesLike,
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setOperator(bytes32,bytes32,bytes32,address,bool)"(
    host: BytesLike,
    domain: BytesLike,
    tld: BytesLike,
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setOwner(bytes32,bytes32,address)"(
    domain: BytesLike,
    tld: BytesLike,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setOwner(bytes32,address)"(
    tld: BytesLike,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRecord(bytes,address,address,bool,bool)"(
    tld: BytesLike,
    owner: string,
    resolver: string,
    enable: boolean,
    omni: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRecord(bytes,bytes,address,address,uint256)"(
    domain: BytesLike,
    tld: BytesLike,
    owner: string,
    resolver: string,
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRecord(bytes,bytes,bytes)"(
    host: BytesLike,
    domain: BytesLike,
    tld: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setResolver(bytes32,address)"(
    tld: BytesLike,
    resolver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setResolver(bytes32,bytes32,address)"(
    domain: BytesLike,
    tld: BytesLike,
    resolver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    enable(tld: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "exists(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "exists(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "exists(bytes32,bytes32)"(
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    expiry(
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    live(
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    omni(tld: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "operator(bytes32,bytes32,address)"(
      domain: BytesLike,
      tld: BytesLike,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "operator(bytes32,bytes32)"(
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "operator(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "operator(bytes32,bytes32,bytes32,address)"(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "owner(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "owner(bytes32,bytes32)"(
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "resolver(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "resolver(bytes32,bytes32)"(
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    setEnable(
      tld: BytesLike,
      enable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setExpiry(
      domain: BytesLike,
      tld: BytesLike,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOperator(bytes32,bytes32,address,bool)"(
      domain: BytesLike,
      tld: BytesLike,
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOperator(bytes32,bytes32,bytes32,address,bool)"(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOwner(bytes32,bytes32,address)"(
      domain: BytesLike,
      tld: BytesLike,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOwner(bytes32,address)"(
      tld: BytesLike,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRecord(bytes,address,address,bool,bool)"(
      tld: BytesLike,
      owner: string,
      resolver: string,
      enable: boolean,
      omni: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRecord(bytes,bytes,address,address,uint256)"(
      domain: BytesLike,
      tld: BytesLike,
      owner: string,
      resolver: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRecord(bytes,bytes,bytes)"(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setResolver(bytes32,address)"(
      tld: BytesLike,
      resolver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setResolver(bytes32,bytes32,address)"(
      domain: BytesLike,
      tld: BytesLike,
      resolver: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewDomain(bytes,bytes,address)"(
      domain?: null,
      tld?: null,
      owner?: null
    ): TypedEventFilter<
      [string, string, string],
      { domain: string; tld: string; owner: string }
    >;

    NewDomain(
      domain?: null,
      tld?: null,
      owner?: null
    ): TypedEventFilter<
      [string, string, string],
      { domain: string; tld: string; owner: string }
    >;

    "NewHost(bytes,bytes,bytes)"(
      host?: null,
      domain?: null,
      tld?: null
    ): TypedEventFilter<
      [string, string, string],
      { host: string; domain: string; tld: string }
    >;

    NewHost(
      host?: null,
      domain?: null,
      tld?: null
    ): TypedEventFilter<
      [string, string, string],
      { host: string; domain: string; tld: string }
    >;

    "NewOwner(bytes,address)"(
      fqdn?: null,
      newOwner?: null
    ): TypedEventFilter<[string, string], { fqdn: string; newOwner: string }>;

    NewOwner(
      fqdn?: null,
      newOwner?: null
    ): TypedEventFilter<[string, string], { fqdn: string; newOwner: string }>;

    "NewResolver(bytes,address)"(
      fqdn?: null,
      newResolver?: null
    ): TypedEventFilter<
      [string, string],
      { fqdn: string; newResolver: string }
    >;

    NewResolver(
      fqdn?: null,
      newResolver?: null
    ): TypedEventFilter<
      [string, string],
      { fqdn: string; newResolver: string }
    >;

    "NewTld(bytes,address)"(
      tld?: null,
      owner?: null
    ): TypedEventFilter<[string, string], { tld: string; owner: string }>;

    NewTld(
      tld?: null,
      owner?: null
    ): TypedEventFilter<[string, string], { tld: string; owner: string }>;

    "SetOperator(bytes,address,bool)"(
      fqdn?: null,
      operator?: null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { fqdn: string; operator: string; approved: boolean }
    >;

    SetOperator(
      fqdn?: null,
      operator?: null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { fqdn: string; operator: string; approved: boolean }
    >;
  };

  estimateGas: {
    enable(tld: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "exists(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exists(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exists(bytes32,bytes32)"(
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expiry(
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    live(
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    omni(tld: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "operator(bytes32,bytes32,address)"(
      domain: BytesLike,
      tld: BytesLike,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "operator(bytes32,bytes32)"(
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "operator(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "operator(bytes32,bytes32,bytes32,address)"(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "owner(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "owner(bytes32,bytes32)"(
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "resolver(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "resolver(bytes32,bytes32)"(
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setEnable(
      tld: BytesLike,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExpiry(
      domain: BytesLike,
      tld: BytesLike,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setOperator(bytes32,bytes32,address,bool)"(
      domain: BytesLike,
      tld: BytesLike,
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setOperator(bytes32,bytes32,bytes32,address,bool)"(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setOwner(bytes32,bytes32,address)"(
      domain: BytesLike,
      tld: BytesLike,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setOwner(bytes32,address)"(
      tld: BytesLike,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRecord(bytes,address,address,bool,bool)"(
      tld: BytesLike,
      owner: string,
      resolver: string,
      enable: boolean,
      omni: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRecord(bytes,bytes,address,address,uint256)"(
      domain: BytesLike,
      tld: BytesLike,
      owner: string,
      resolver: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRecord(bytes,bytes,bytes)"(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setResolver(bytes32,address)"(
      tld: BytesLike,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setResolver(bytes32,bytes32,address)"(
      domain: BytesLike,
      tld: BytesLike,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    enable(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exists(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exists(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exists(bytes32,bytes32)"(
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expiry(
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gracePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    live(
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    omni(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "operator(bytes32,bytes32,address)"(
      domain: BytesLike,
      tld: BytesLike,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "operator(bytes32,bytes32)"(
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "operator(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "operator(bytes32,bytes32,bytes32,address)"(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "owner(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "owner(bytes32,bytes32)"(
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "resolver(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "resolver(bytes32,bytes32)"(
      domain: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setEnable(
      tld: BytesLike,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExpiry(
      domain: BytesLike,
      tld: BytesLike,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setOperator(bytes32,bytes32,address,bool)"(
      domain: BytesLike,
      tld: BytesLike,
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setOperator(bytes32,bytes32,bytes32,address,bool)"(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setOwner(bytes32,bytes32,address)"(
      domain: BytesLike,
      tld: BytesLike,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setOwner(bytes32,address)"(
      tld: BytesLike,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRecord(bytes,address,address,bool,bool)"(
      tld: BytesLike,
      owner: string,
      resolver: string,
      enable: boolean,
      omni: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRecord(bytes,bytes,address,address,uint256)"(
      domain: BytesLike,
      tld: BytesLike,
      owner: string,
      resolver: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRecord(bytes,bytes,bytes)"(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setResolver(bytes32,address)"(
      tld: BytesLike,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setResolver(bytes32,bytes32,address)"(
      domain: BytesLike,
      tld: BytesLike,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
