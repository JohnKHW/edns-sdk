/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPhoneNumberResolverInterface extends ethers.utils.Interface {
  functions: {
    "phoneNumber(string,string,string)": FunctionFragment;
    "setPhoneNumber(string,string,string,bytes,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "phoneNumber",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPhoneNumber",
    values: [string, string, string, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "phoneNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPhoneNumber",
    data: BytesLike
  ): Result;

  events: {
    "SetPhoneNumber(bytes,bytes,bytes,bytes,bytes,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetPhoneNumber"): EventFragment;
}

export type SetPhoneNumberEvent = TypedEvent<
  [string, string, string, string, string, string] & {
    fqdn: string;
    host: string;
    domain: string;
    tld: string;
    payload: string;
    signature: string;
  }
>;

export class IPhoneNumberResolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPhoneNumberResolverInterface;

  functions: {
    "phoneNumber(string,string,string)"(
      host: string,
      domain: string,
      tld: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "phoneNumber(string)"(
      fqdn: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "phoneNumber(bytes32)"(
      fqdn: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setPhoneNumber(
      host: string,
      domain: string,
      tld: string,
      payload: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  "phoneNumber(string,string,string)"(
    host: string,
    domain: string,
    tld: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "phoneNumber(string)"(
    fqdn: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "phoneNumber(bytes32)"(
    fqdn: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  setPhoneNumber(
    host: string,
    domain: string,
    tld: string,
    payload: BytesLike,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    "phoneNumber(string,string,string)"(
      host: string,
      domain: string,
      tld: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "phoneNumber(string)"(
      fqdn: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "phoneNumber(bytes32)"(
      fqdn: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    setPhoneNumber(
      host: string,
      domain: string,
      tld: string,
      payload: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SetPhoneNumber(bytes,bytes,bytes,bytes,bytes,bytes)"(
      fqdn?: null,
      host?: null,
      domain?: null,
      tld?: null,
      payload?: null,
      signature?: null
    ): TypedEventFilter<
      [string, string, string, string, string, string],
      {
        fqdn: string;
        host: string;
        domain: string;
        tld: string;
        payload: string;
        signature: string;
      }
    >;

    SetPhoneNumber(
      fqdn?: null,
      host?: null,
      domain?: null,
      tld?: null,
      payload?: null,
      signature?: null
    ): TypedEventFilter<
      [string, string, string, string, string, string],
      {
        fqdn: string;
        host: string;
        domain: string;
        tld: string;
        payload: string;
        signature: string;
      }
    >;
  };

  estimateGas: {
    "phoneNumber(string,string,string)"(
      host: string,
      domain: string,
      tld: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "phoneNumber(string)"(
      fqdn: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "phoneNumber(bytes32)"(
      fqdn: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPhoneNumber(
      host: string,
      domain: string,
      tld: string,
      payload: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "phoneNumber(string,string,string)"(
      host: string,
      domain: string,
      tld: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "phoneNumber(string)"(
      fqdn: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "phoneNumber(bytes32)"(
      fqdn: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPhoneNumber(
      host: string,
      domain: string,
      tld: string,
      payload: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
