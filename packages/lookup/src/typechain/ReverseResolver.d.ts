/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ReverseResolverInterface extends ethers.utils.Interface {
  functions: {
    "MAX_LABEL_LENGTH()": FunctionFragment;
    "MIN_LABEL_LENGTH()": FunctionFragment;
    "_setReverseRecord(bytes,bytes,bytes,bytes)": FunctionFragment;
    "reverse(bytes)": FunctionFragment;
    "setReverseRecord(bytes,bytes,bytes,bytes)": FunctionFragment;
    "setReverseRecord_SYNC(bytes,bytes,bytes,bytes)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "valid(string,string,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_LABEL_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_LABEL_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_setReverseRecord",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "reverse", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setReverseRecord",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReverseRecord_SYNC",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "valid",
    values: [string, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_LABEL_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_LABEL_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setReverseRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reverse", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReverseRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReverseRecord_SYNC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "valid", data: BytesLike): Result;

  events: {
    "SetReverseRecord(bytes,bytes,bytes,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetReverseRecord"): EventFragment;
}

export type SetReverseRecordEvent = TypedEvent<
  [string, string, string, string] & {
    host: string;
    domain: string;
    tld: string;
    address_: string;
  }
>;

export class ReverseResolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ReverseResolverInterface;

  functions: {
    MAX_LABEL_LENGTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_LABEL_LENGTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    _setReverseRecord(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      address_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reverse(address_: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    setReverseRecord(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      address_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReverseRecord_SYNC(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      address_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "valid(string,string,string)"(
      host: string,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "valid(string,string)"(
      domain: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "valid(bytes,bytes)"(
      domain: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "valid(bytes,bytes,bytes)"(
      host: BytesLike,
      arg1: BytesLike,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  MAX_LABEL_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_LABEL_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

  _setReverseRecord(
    host: BytesLike,
    domain: BytesLike,
    tld: BytesLike,
    address_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reverse(address_: BytesLike, overrides?: CallOverrides): Promise<string>;

  setReverseRecord(
    host: BytesLike,
    domain: BytesLike,
    tld: BytesLike,
    address_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReverseRecord_SYNC(
    host: BytesLike,
    domain: BytesLike,
    tld: BytesLike,
    address_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "valid(string,string,string)"(
    host: string,
    arg1: string,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "valid(string,string)"(
    domain: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "valid(bytes,bytes)"(
    domain: BytesLike,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "valid(bytes,bytes,bytes)"(
    host: BytesLike,
    arg1: BytesLike,
    arg2: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    MAX_LABEL_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LABEL_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    _setReverseRecord(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      address_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    reverse(address_: BytesLike, overrides?: CallOverrides): Promise<string>;

    setReverseRecord(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      address_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setReverseRecord_SYNC(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      address_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "valid(string,string,string)"(
      host: string,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "valid(string,string)"(
      domain: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "valid(bytes,bytes)"(
      domain: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "valid(bytes,bytes,bytes)"(
      host: BytesLike,
      arg1: BytesLike,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "SetReverseRecord(bytes,bytes,bytes,bytes)"(
      host?: null,
      domain?: null,
      tld?: null,
      address_?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { host: string; domain: string; tld: string; address_: string }
    >;

    SetReverseRecord(
      host?: null,
      domain?: null,
      tld?: null,
      address_?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { host: string; domain: string; tld: string; address_: string }
    >;
  };

  estimateGas: {
    MAX_LABEL_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LABEL_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    _setReverseRecord(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      address_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reverse(address_: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    setReverseRecord(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      address_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReverseRecord_SYNC(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      address_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "valid(string,string,string)"(
      host: string,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "valid(string,string)"(
      domain: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "valid(bytes,bytes)"(
      domain: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "valid(bytes,bytes,bytes)"(
      host: BytesLike,
      arg1: BytesLike,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_LABEL_LENGTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_LABEL_LENGTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _setReverseRecord(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      address_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reverse(
      address_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setReverseRecord(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      address_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReverseRecord_SYNC(
      host: BytesLike,
      domain: BytesLike,
      tld: BytesLike,
      address_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "valid(string,string,string)"(
      host: string,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "valid(string,string)"(
      domain: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "valid(bytes,bytes)"(
      domain: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "valid(bytes,bytes,bytes)"(
      host: BytesLike,
      arg1: BytesLike,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
